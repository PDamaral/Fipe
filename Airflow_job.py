"""
sql
DAG auto-generated by Astro Cloud IDE.
"""

from airflow.decorators import dag
from astro import sql as aql
import pandas as pd
import pendulum

import requests
import json
import pandas as pd
import time
import pyodbc

@aql.dataframe(task_id="Variaveis")
def Variaveis_func():
    df = pd.DataFrame()
    df1 = pd.DataFrame()
    url = 'https://parallelum.com.br/fipe/api/v1/motos/marcas'
    

@aql.dataframe(task_id="ExtracaoAPI")
def ExtracaoAPI_func():
    response = requests.get(url)
    response_1 = response.json()
    df_marca = pd.DataFrame.from_records(response_1)
    
    for x in df_marca['codigo']:
        url_mod = 'https://parallelum.com.br/fipe/api/v1/motos/marcas/'+str(x)+'/modelos'
        response_mod = requests.get(url_mod)
        response_mod = response_mod.json()
        print(x)
        time.sleep(2)
        df_aux = pd.DataFrame.from_records(response_mod['modelos'])
        for y in df_aux['codigo']:
            url_anos = 'https://parallelum.com.br/fipe/api/v1/motos/marcas/'+str(x)+'/modelos/'+str(y)+'/anos'
            response_anos = requests.get(url_anos)
            response_anos = response_anos.json()
            time.sleep(1)
            df_aux1 = pd.DataFrame.from_records(response_anos)
            for z in df_aux1['codigo']:
                url_anos = 'https://parallelum.com.br/fipe/api/v1/motos/marcas/'+str(x)+'/modelos/'+str(y)+'/anos/'+ str(z)
                response_preco = requests.get(url_anos)
                response_preco = response_preco.json()
                time.sleep(1)
                df_aux3 = pd.DataFrame.from_records(response_preco, index=[0])
                df = pd.concat([df, df_aux3])

@aql.dataframe(task_id="cnxSQL")
def cnxSQL_func():
    cnxn = pyodbc.connect(driver='{SQL Server}', server='localhost\SQLEXPRESS', database='master',               
                   trusted_connection='yes')
    
    cursor = cnxn.cursor()

@aql.dataframe(task_id="InsertSQL")
def InsertSQL_func():
    for index, row in df.iterrows():
         cursor.execute("INSERT INTO dbo.tabela_FIPE (AnoModelo,CodigoFipe,Combustivel,Marca,MesReferencia,Modelo,SiglaCombustivel,TipoVeiculo,Valor) values(?,?,?,?,?,?,?,?,?)", 
                                                    row.AnoModelo, row.CodigoFipe, row.Combustivel,row.Marca,row.MesReferencia,row.Modelo,row.SiglaCombustivel,row.TipoVeiculo,row.Valor)
    cnxn.commit()
    cursor.close()

default_args={
    "owner": "paulodshamaral@gmail.com,Open in Cloud IDE",
}

@dag(
    default_args=default_args,
    schedule="0 3 5 * 1",
    start_date=pendulum.from_format("2024-01-05", "YYYY-MM-DD").in_tz("Brazil/East"),
    catchup=False,
    owner_links={
        "paulodshamaral@gmail.com": "mailto:paulodshamaral@gmail.com",
        "Open in Cloud IDE": "https://cloud.astronomer.io/clrgqk8m5068i01qzvoypewgq/cloud-ide/clrgqkm1u00jq01ngejwbgqb3/clrgqo26s068m01qzmkayekvx",
    },
)
def sql():
    Variaveis = Variaveis_func()

    ExtracaoAPI = ExtracaoAPI_func()

    cnxSQL = cnxSQL_func()

    InsertSQL = InsertSQL_func()

    ExtracaoAPI << Variaveis

    InsertSQL << cnxSQL

    cnxSQL << ExtracaoAPI

dag_obj = sql()
